name: FlowMaster CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # 代码质量检查
  code-quality:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Run backend tests
      run: |
        cd flowmaster-backend
        ./mvnw clean test
        
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install frontend dependencies
      run: |
        cd flowmaster-frontend/flowmaster-web && npm ci
        cd ../flowmaster-admin && npm ci
        cd ../flowmaster-designer && npm ci
        
    - name: Run frontend tests
      run: |
        cd flowmaster-frontend/flowmaster-web && npm run test
        cd ../flowmaster-admin && npm run test
        cd ../flowmaster-designer && npm run test
        
    - name: Run linting
      run: |
        cd flowmaster-frontend/flowmaster-web && npm run lint
        cd ../flowmaster-admin && npm run lint
        cd ../flowmaster-designer && npm run lint

  # 构建和推送镜像
  build-and-push:
    needs: code-quality
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [user, auth, workflow, gateway, monitoring]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./flowmaster-backend/flowmaster-${{ matrix.service }}/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # 构建前端应用
  build-frontend:
    needs: code-quality
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app: [web, admin, designer]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        cd flowmaster-frontend/flowmaster-${{ matrix.app }}
        npm ci
        
    - name: Build application
      run: |
        cd flowmaster-frontend/flowmaster-${{ matrix.app }}
        npm run build
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.app }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./flowmaster-frontend/flowmaster-${{ matrix.app }}/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # 部署到Kubernetes
  deploy:
    needs: [build-and-push, build-frontend]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
        
    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
        
    - name: Deploy to Kubernetes
      run: |
        export KUBECONFIG=kubeconfig
        kubectl apply -f k8s/namespaces/
        kubectl apply -f k8s/configmaps/
        kubectl apply -f k8s/secrets/
        kubectl apply -f k8s/deployments/
        kubectl apply -f k8s/services/
        kubectl apply -f k8s/ingress/
        
    - name: Wait for deployment
      run: |
        export KUBECONFIG=kubeconfig
        kubectl rollout status deployment/flowmaster-user -n flowmaster --timeout=300s
        kubectl rollout status deployment/flowmaster-auth -n flowmaster --timeout=300s
        kubectl rollout status deployment/flowmaster-workflow -n flowmaster --timeout=300s
        kubectl rollout status deployment/flowmaster-gateway -n flowmaster --timeout=300s
        kubectl rollout status deployment/flowmaster-monitoring -n flowmaster --timeout=300s